# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: api.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterable,
    AsyncIterator,
    Dict,
    Iterable,
    List,
    Optional,
    Union,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....google import rpc as ___google_rpc__
from ...model import v1 as __model_v1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class OpType(betterproto.Enum):
    """Operation type enum"""

    OP_TYPE_UNSPECIFIED = 0
    OP_TYPE_TRANSACTION = 1
    OP_TYPE_ROLL_BUY = 2
    OP_TYPE_ROLL_SELL = 3
    OP_TYPE_EXECUTE_SC = 4
    OP_TYPE_CALL_SC = 5


@dataclass(eq=False, repr=False)
class GetBlocksRequest(betterproto.Message):
    """GetBlocksRequest holds request for GetBlocks"""

    id: str = betterproto.string_field(1)
    """Request id"""

    queries: List["GetBlocksQuery"] = betterproto.message_field(2)
    """Queries"""


@dataclass(eq=False, repr=False)
class GetBlocksQuery(betterproto.Message):
    """GetBlocks Query"""

    filter: "GetBlocksFilter" = betterproto.message_field(1)
    """Filter"""


@dataclass(eq=False, repr=False)
class GetBlocksFilter(betterproto.Message):
    """GetBlocks Filter"""

    id: str = betterproto.string_field(1)
    """Block id"""


@dataclass(eq=False, repr=False)
class GetBlocksResponse(betterproto.Message):
    """GetBlocksResponse holds response from GetBlocks"""

    id: str = betterproto.string_field(1)
    """Request id"""

    context: "BlocksContext" = betterproto.message_field(2)
    """Context"""

    blocks: List["__model_v1__.BlockWrapper"] = betterproto.message_field(3)
    """Blocks wrappers"""


@dataclass(eq=False, repr=False)
class BlocksContext(betterproto.Message):
    """Blocks context"""

    slot: "__model_v1__.Slot" = betterproto.message_field(1)
    """Slot"""


@dataclass(eq=False, repr=False)
class GetBlocksBySlotsRequest(betterproto.Message):
    """GetBlocksBySlotsRequest holds request for GetBlocksBySlots"""

    id: str = betterproto.string_field(1)
    """Request id"""

    slots: List["__model_v1__.Slot"] = betterproto.message_field(2)
    """Slots"""


@dataclass(eq=False, repr=False)
class GetBlocksBySlotsResponse(betterproto.Message):
    """GetBlocksBySlotsResponse holds response from GetBlocksBySlots"""

    id: str = betterproto.string_field(1)
    """Request id"""

    blocks: List["__model_v1__.Block"] = betterproto.message_field(2)
    """Blocks"""


@dataclass(eq=False, repr=False)
class GetDatastoreEntriesRequest(betterproto.Message):
    """GetDatastoreEntriesRequest holds request from GetDatastoreEntries"""

    id: str = betterproto.string_field(1)
    """Request id"""

    queries: List["DatastoreEntriesQuery"] = betterproto.message_field(2)
    """Queries"""


@dataclass(eq=False, repr=False)
class DatastoreEntriesQuery(betterproto.Message):
    """DatastoreEntries Query"""

    filter: "DatastoreEntryFilter" = betterproto.message_field(1)
    """Filter"""


@dataclass(eq=False, repr=False)
class DatastoreEntryFilter(betterproto.Message):
    address: str = betterproto.string_field(1)
    """/ Associated address of the entry"""

    key: bytes = betterproto.bytes_field(2)
    """Datastore key"""


@dataclass(eq=False, repr=False)
class GetDatastoreEntriesResponse(betterproto.Message):
    """GetDatastoreEntriesResponse holds response from GetDatastoreEntries"""

    id: str = betterproto.string_field(1)
    """Request id"""

    entries: List["DatastoreEntry"] = betterproto.message_field(2)
    """Datastore entries"""


@dataclass(eq=False, repr=False)
class DatastoreEntry(betterproto.Message):
    """DatastoreEntry"""

    final_value: bytes = betterproto.bytes_field(1)
    """final datastore entry value"""

    candidate_value: bytes = betterproto.bytes_field(2)
    """candidate_value datastore entry value"""


@dataclass(eq=False, repr=False)
class GetLargestStakersRequest(betterproto.Message):
    """GetLargestStakersRequest holds request from GetLargestStakers"""

    id: str = betterproto.string_field(1)
    """Request id"""

    query: "LargestStakersQuery" = betterproto.message_field(2)
    """Query"""


@dataclass(eq=False, repr=False)
class LargestStakersQuery(betterproto.Message):
    """LargestStakers Query"""

    offset: int = betterproto.fixed64_field(1)
    """Starting offset for the list of stakers. Defaults to 1"""

    limit: int = betterproto.fixed64_field(2)
    """Limits the number of stakers to return. Defaults to 50"""

    filter: "LargestStakersFilter" = betterproto.message_field(3)
    """Filter"""


@dataclass(eq=False, repr=False)
class LargestStakersFilter(betterproto.Message):
    """LargestStakers Filter"""

    min_rolls: Optional[int] = betterproto.fixed64_field(
        1, optional=True, group="_min_rolls"
    )
    """Minimum rolls (Optional)"""

    max_rolls: Optional[int] = betterproto.fixed64_field(
        2, optional=True, group="_max_rolls"
    )
    """Maximum rolls (Optional)"""


@dataclass(eq=False, repr=False)
class GetLargestStakersResponse(betterproto.Message):
    """GetLargestStakersResponse holds response from GetLargestStakers"""

    id: str = betterproto.string_field(1)
    """Request id"""

    context: "LargestStakersContext" = betterproto.message_field(2)
    """Context"""

    stakers: List["LargestStakerEntry"] = betterproto.message_field(3)
    """Largest stakers"""


@dataclass(eq=False, repr=False)
class LargestStakersContext(betterproto.Message):
    """LargestStakers context"""

    slot: "__model_v1__.Slot" = betterproto.message_field(1)
    """Slot"""


@dataclass(eq=False, repr=False)
class LargestStakerEntry(betterproto.Message):
    """LargestStakerEntry"""

    address: str = betterproto.string_field(1)
    """Address"""

    rolls: int = betterproto.fixed64_field(2)
    """Rolls"""


@dataclass(eq=False, repr=False)
class GetMipStatusRequest(betterproto.Message):
    """GetMipStatusRequest holds request for GetMipStatus"""

    id: str = betterproto.string_field(1)
    """Request id"""


@dataclass(eq=False, repr=False)
class GetMipStatusResponse(betterproto.Message):
    """GetMipStatusResponse holds response from GetMipStatus"""

    id: str = betterproto.string_field(1)
    """Request id"""

    entries: List["__model_v1__.MipStatusEntry"] = betterproto.message_field(2)
    """MipInfo - status id entries"""


@dataclass(eq=False, repr=False)
class GetNextBlockBestParentsRequest(betterproto.Message):
    """
    GetNextBlockBestParentsRequest holds request for GetNextBlockBestParents
    """

    id: str = betterproto.string_field(1)
    """Request id"""


@dataclass(eq=False, repr=False)
class GetNextBlockBestParentsResponse(betterproto.Message):
    """
    GetNextBlockBestParentsResponse holds response from GetNextBlockBestParents
    """

    id: str = betterproto.string_field(1)
    """Request id"""

    parents: List["BlockParent"] = betterproto.message_field(2)
    """Best parents"""


@dataclass(eq=False, repr=False)
class BlockParent(betterproto.Message):
    """Block parent tuple"""

    block_id: str = betterproto.string_field(1)
    """Block id"""

    period: int = betterproto.fixed64_field(2)
    """Period"""


@dataclass(eq=False, repr=False)
class GetOperationsRequest(betterproto.Message):
    """GetOperationsRequest holds request for GetOperations"""

    id: str = betterproto.string_field(1)
    """Request id"""

    queries: List["GetOperationsQuery"] = betterproto.message_field(2)
    """Queries"""


@dataclass(eq=False, repr=False)
class GetOperationsQuery(betterproto.Message):
    """GetOperations Query"""

    filter: "GetOperationsFilter" = betterproto.message_field(1)
    """Filter"""


@dataclass(eq=False, repr=False)
class GetOperationsFilter(betterproto.Message):
    """GetOperations Filter"""

    id: str = betterproto.string_field(1)
    """Operation id"""


@dataclass(eq=False, repr=False)
class GetOperationsResponse(betterproto.Message):
    """GetOperationsResponse holds response from GetOperations"""

    id: str = betterproto.string_field(1)
    """Request id"""

    context: "OperationsContext" = betterproto.message_field(2)
    """Context"""

    operations: List["__model_v1__.OperationWrapper"] = betterproto.message_field(3)
    """Operations wrappers"""


@dataclass(eq=False, repr=False)
class OperationsContext(betterproto.Message):
    """Operations context"""

    slot: "__model_v1__.Slot" = betterproto.message_field(1)
    """Slot"""


@dataclass(eq=False, repr=False)
class GetScExecutionEventsRequest(betterproto.Message):
    """GetScExecutionEventsRequest holds request for GetScExecutionEvents"""

    id: str = betterproto.string_field(1)
    """Request id"""

    query: "GetScExecutionEventsQuery" = betterproto.message_field(2)
    """Query"""


@dataclass(eq=False, repr=False)
class GetScExecutionEventsQuery(betterproto.Message):
    """GetScExecutionEvents Query"""

    filter: "GetScExecutionEventsFilter" = betterproto.message_field(1)
    """Filter"""


@dataclass(eq=False, repr=False)
class GetScExecutionEventsFilter(betterproto.Message):
    """GetScExecutionEvents Filter"""

    start_slot: Optional["__model_v1__.Slot"] = betterproto.message_field(
        1, optional=True, group="_start_slot"
    )
    """Start slot (Optional)"""

    end_slot: Optional["__model_v1__.Slot"] = betterproto.message_field(
        2, optional=True, group="_end_slot"
    )
    """End slot (Optional)"""

    caller_address: Optional[str] = betterproto.string_field(
        3, optional=True, group="_caller_address"
    )
    """Caller address"""

    emitter_address: Optional[str] = betterproto.string_field(
        4, optional=True, group="_emitter_address"
    )
    """Emitter address (Optional)"""

    original_operation_id: Optional[str] = betterproto.string_field(
        5, optional=True, group="_original_operation_id"
    )
    """Original operation id (Optional)"""

    status: List["__model_v1__.ScExecutionEventStatus"] = betterproto.enum_field(6)
    """Status"""


@dataclass(eq=False, repr=False)
class GetScExecutionEventsResponse(betterproto.Message):
    """
    GetScExecutionEventsResponse holds response from GetScExecutionEvents
    """

    id: str = betterproto.string_field(1)
    """Request id"""

    context: "GetScExecutionEventsContext" = betterproto.message_field(2)
    """Context"""

    events: List["__model_v1__.ScExecutionEvent"] = betterproto.message_field(3)
    """ScExecutionEvents"""


@dataclass(eq=False, repr=False)
class GetScExecutionEventsContext(betterproto.Message):
    """ScExecutionEvents context"""

    slot: "__model_v1__.Slot" = betterproto.message_field(1)
    """Slot"""


@dataclass(eq=False, repr=False)
class GetSelectorDrawsRequest(betterproto.Message):
    """GetSelectorDrawsRequest holds request from GetSelectorDraws"""

    id: str = betterproto.string_field(1)
    """Request id"""

    queries: List["SelectorDrawsQuery"] = betterproto.message_field(2)
    """Queries"""


@dataclass(eq=False, repr=False)
class SelectorDrawsQuery(betterproto.Message):
    """SelectorDraws Query"""

    filter: "SelectorDrawsFilter" = betterproto.message_field(1)
    """Filter"""


@dataclass(eq=False, repr=False)
class SelectorDrawsFilter(betterproto.Message):
    """SelectorDraws Filter"""

    address: str = betterproto.string_field(1)
    """Address"""


@dataclass(eq=False, repr=False)
class GetSelectorDrawsResponse(betterproto.Message):
    """GetSelectorDrawsResponse holds response from GetSelectorDraws"""

    id: str = betterproto.string_field(1)
    """Request id"""

    selector_draws: List["__model_v1__.SelectorDraws"] = betterproto.message_field(2)
    """Selector draws"""


@dataclass(eq=False, repr=False)
class GetTransactionsThroughputRequest(betterproto.Message):
    """
    GetTransactionsThroughputRequest holds request for
    GetTransactionsThroughput
    """

    id: str = betterproto.string_field(1)
    """Request id"""


@dataclass(eq=False, repr=False)
class GetTransactionsThroughputResponse(betterproto.Message):
    """
    GetTransactionsThroughputResponse holds response from
    GetTransactionsThroughput
    """

    id: str = betterproto.string_field(1)
    """Request id"""

    throughput: int = betterproto.fixed32_field(2)
    """Transactions throughput"""


@dataclass(eq=False, repr=False)
class GetVersionRequest(betterproto.Message):
    """GetVersionRequest holds request from GetVersion"""

    id: str = betterproto.string_field(1)
    """Request id"""


@dataclass(eq=False, repr=False)
class GetVersionResponse(betterproto.Message):
    """GetVersionResponse holds response from GetVersion"""

    id: str = betterproto.string_field(1)
    """Request id"""

    version: str = betterproto.string_field(2)
    """Version"""


@dataclass(eq=False, repr=False)
class NewBlocksRequest(betterproto.Message):
    """NewBlocksRequest holds request for NewBlocks"""

    id: str = betterproto.string_field(1)
    """Request id"""


@dataclass(eq=False, repr=False)
class NewBlocksResponse(betterproto.Message):
    """NewBlocksResponse holds response from NewBlocks"""

    id: str = betterproto.string_field(1)
    """Request id"""

    block: "__model_v1__.SignedBlock" = betterproto.message_field(2)
    """Signed block"""


@dataclass(eq=False, repr=False)
class NewBlocksHeadersRequest(betterproto.Message):
    """NewBlocksHeadersRequest holds request for NewBlocksHeaders"""

    id: str = betterproto.string_field(1)
    """Request id"""


@dataclass(eq=False, repr=False)
class NewBlocksHeadersResponse(betterproto.Message):
    """NewBlocksHeadersResponse holds response from NewBlocksHeaders"""

    id: str = betterproto.string_field(1)
    """Request id"""

    block_header: "__model_v1__.SignedBlockHeader" = betterproto.message_field(2)
    """Signed block header"""


@dataclass(eq=False, repr=False)
class NewEndorsementsRequest(betterproto.Message):
    """NewEndorsementsRequest holds request for NewEndorsements"""

    id: str = betterproto.string_field(1)
    """Request id"""


@dataclass(eq=False, repr=False)
class NewEndorsementsResponse(betterproto.Message):
    """NewEndorsementsResponse holds response from NewEndorsements"""

    id: str = betterproto.string_field(1)
    """Request id"""

    endorsement: "__model_v1__.SignedEndorsement" = betterproto.message_field(2)
    """Signed endorsement"""


@dataclass(eq=False, repr=False)
class NewFilledBlocksRequest(betterproto.Message):
    """NewFilledBlocksRequest holds request for NewFilledBlocks"""

    id: str = betterproto.string_field(1)
    """Request id"""


@dataclass(eq=False, repr=False)
class NewFilledBlocksResponse(betterproto.Message):
    """NewFilledBlocksResponse holds response from NewFilledBlocks"""

    id: str = betterproto.string_field(1)
    """Request id"""

    filled_block: "__model_v1__.FilledBlock" = betterproto.message_field(2)
    """Block with operations content"""


@dataclass(eq=False, repr=False)
class NewOperationsRequest(betterproto.Message):
    """NewOperationsRequest holds request for NewOperations"""

    id: str = betterproto.string_field(1)
    """Request id"""

    query: "NewOperationsQuery" = betterproto.message_field(2)
    """Query"""


@dataclass(eq=False, repr=False)
class NewOperationsQuery(betterproto.Message):
    """NewOperations Query"""

    filter: "NewOperationsFilter" = betterproto.message_field(1)
    """Filter"""


@dataclass(eq=False, repr=False)
class NewOperationsFilter(betterproto.Message):
    """NewOperations Filter"""

    types: List["OpType"] = betterproto.enum_field(1)
    """Operation type enum"""


@dataclass(eq=False, repr=False)
class NewOperationsResponse(betterproto.Message):
    """NewOperationsResponse holds response from NewOperations"""

    id: str = betterproto.string_field(1)
    """Request id"""

    operation: "__model_v1__.SignedOperation" = betterproto.message_field(2)
    """Signed operation"""


@dataclass(eq=False, repr=False)
class NewSlotExecutionOutputsRequest(betterproto.Message):
    """
    NewSlotExecutionOutputsRequest holds request for NewSlotExecutionOutputs
    """

    id: str = betterproto.string_field(1)
    """Request id"""

    query: "NewSlotExecutionOutputsQuery" = betterproto.message_field(2)
    """Query"""


@dataclass(eq=False, repr=False)
class NewSlotExecutionOutputsQuery(betterproto.Message):
    """NewSlotExecutionOutputs Query"""

    filter: "NewSlotExecutionOutputsFilter" = betterproto.message_field(1)
    """Filter"""


@dataclass(eq=False, repr=False)
class NewSlotExecutionOutputsFilter(betterproto.Message):
    """NewSlotExecutionOutputs Filter"""

    status: List["__model_v1__.ExecutionOutputStatus"] = betterproto.enum_field(1)
    """Execution output status enum"""


@dataclass(eq=False, repr=False)
class NewSlotExecutionOutputsResponse(betterproto.Message):
    """
    NewSlotExecutionOutputsResponse holds response from NewSlotExecutionOutputs
    """

    id: str = betterproto.string_field(1)
    """Request id"""

    output: "__model_v1__.SlotExecutionOutput" = betterproto.message_field(2)
    """Slot execution output"""


@dataclass(eq=False, repr=False)
class SendBlocksRequest(betterproto.Message):
    """SendBlocksRequest holds parameters to SendBlocks"""

    id: str = betterproto.string_field(1)
    """Request id"""

    block: "__model_v1__.SecureShare" = betterproto.message_field(2)
    """Secure shared block"""


@dataclass(eq=False, repr=False)
class SendBlocksResponse(betterproto.Message):
    """SendBlocksResponse holds response from SendBlocks"""

    id: str = betterproto.string_field(1)
    """Request id"""

    result: "BlockResult" = betterproto.message_field(2, group="message")
    """Block result"""

    error: "___google_rpc__.Status" = betterproto.message_field(3, group="message")
    """gRPC error(status)"""


@dataclass(eq=False, repr=False)
class BlockResult(betterproto.Message):
    """Holds Block response"""

    block_id: str = betterproto.string_field(1)
    """Block id"""


@dataclass(eq=False, repr=False)
class SendEndorsementsRequest(betterproto.Message):
    """SendEndorsementsRequest holds parameters to SendEndorsements"""

    id: str = betterproto.string_field(1)
    """Request id"""

    endorsements: List["__model_v1__.SecureShare"] = betterproto.message_field(2)
    """Secure shared endorsements"""


@dataclass(eq=False, repr=False)
class SendEndorsementsResponse(betterproto.Message):
    """SendEndorsementsResponse holds response from SendEndorsements"""

    id: str = betterproto.string_field(1)
    """Request id"""

    result: "EndorsementResult" = betterproto.message_field(2, group="message")
    """Endorsement result"""

    error: "___google_rpc__.Status" = betterproto.message_field(3, group="message")
    """gRPC error(status)"""


@dataclass(eq=False, repr=False)
class EndorsementResult(betterproto.Message):
    """Holds Endorsement response"""

    endorsements_ids: List[str] = betterproto.string_field(1)
    """Endorsements ids"""


@dataclass(eq=False, repr=False)
class SendOperationsRequest(betterproto.Message):
    """SendOperationsRequest holds parameters to SendOperations"""

    id: str = betterproto.string_field(1)
    """Request id"""

    operations: List["__model_v1__.SecureShare"] = betterproto.message_field(2)
    """Secured shared operations"""


@dataclass(eq=False, repr=False)
class SendOperationsResponse(betterproto.Message):
    """SendOperationsResponse holds response from SendOperations"""

    id: str = betterproto.string_field(1)
    """Request id"""

    result: "OperationResult" = betterproto.message_field(2, group="message")
    """Operation result"""

    error: "___google_rpc__.Status" = betterproto.message_field(3, group="message")
    """gRPC error(status)"""


@dataclass(eq=False, repr=False)
class OperationResult(betterproto.Message):
    """Holds Operation response"""

    operations_ids: List[str] = betterproto.string_field(1)
    """Operations ids"""


@dataclass(eq=False, repr=False)
class TransactionsThroughputRequest(betterproto.Message):
    """
    TransactionsThroughputRequest holds request for TransactionsThroughput
    """

    id: str = betterproto.string_field(1)
    """Request id"""

    interval: Optional[int] = betterproto.fixed64_field(
        2, optional=True, group="_interval"
    )
    """Timer interval in seconds (Optional). Defaults to 10s"""


@dataclass(eq=False, repr=False)
class TransactionsThroughputResponse(betterproto.Message):
    """
    TransactionsThroughputResponse holds response from TransactionsThroughput
    """

    id: str = betterproto.string_field(1)
    """Request id"""

    throughput: int = betterproto.fixed32_field(2)
    """Transactions throughput"""


class MassaServiceStub(betterproto.ServiceStub):
    async def get_blocks(
        self,
        get_blocks_request: "GetBlocksRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetBlocksResponse":
        return await self._unary_unary(
            "/massa.api.v1.MassaService/GetBlocks",
            get_blocks_request,
            GetBlocksResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_blocks_by_slots(
        self,
        get_blocks_by_slots_request: "GetBlocksBySlotsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetBlocksBySlotsResponse":
        return await self._unary_unary(
            "/massa.api.v1.MassaService/GetBlocksBySlots",
            get_blocks_by_slots_request,
            GetBlocksBySlotsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_datastore_entries(
        self,
        get_datastore_entries_request: "GetDatastoreEntriesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDatastoreEntriesResponse":
        return await self._unary_unary(
            "/massa.api.v1.MassaService/GetDatastoreEntries",
            get_datastore_entries_request,
            GetDatastoreEntriesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_largest_stakers(
        self,
        get_largest_stakers_request: "GetLargestStakersRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetLargestStakersResponse":
        return await self._unary_unary(
            "/massa.api.v1.MassaService/GetLargestStakers",
            get_largest_stakers_request,
            GetLargestStakersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_mip_status(
        self,
        get_mip_status_request: "GetMipStatusRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetMipStatusResponse":
        return await self._unary_unary(
            "/massa.api.v1.MassaService/GetMipStatus",
            get_mip_status_request,
            GetMipStatusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_next_block_best_parents(
        self,
        get_next_block_best_parents_request: "GetNextBlockBestParentsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetNextBlockBestParentsResponse":
        return await self._unary_unary(
            "/massa.api.v1.MassaService/GetNextBlockBestParents",
            get_next_block_best_parents_request,
            GetNextBlockBestParentsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_operations(
        self,
        get_operations_request: "GetOperationsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetOperationsResponse":
        return await self._unary_unary(
            "/massa.api.v1.MassaService/GetOperations",
            get_operations_request,
            GetOperationsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_sc_execution_events(
        self,
        get_sc_execution_events_request: "GetScExecutionEventsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetScExecutionEventsResponse":
        return await self._unary_unary(
            "/massa.api.v1.MassaService/GetScExecutionEvents",
            get_sc_execution_events_request,
            GetScExecutionEventsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_selector_draws(
        self,
        get_selector_draws_request: "GetSelectorDrawsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetSelectorDrawsResponse":
        return await self._unary_unary(
            "/massa.api.v1.MassaService/GetSelectorDraws",
            get_selector_draws_request,
            GetSelectorDrawsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_transactions_throughput(
        self,
        get_transactions_throughput_request: "GetTransactionsThroughputRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetTransactionsThroughputResponse":
        return await self._unary_unary(
            "/massa.api.v1.MassaService/GetTransactionsThroughput",
            get_transactions_throughput_request,
            GetTransactionsThroughputResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_version(
        self,
        get_version_request: "GetVersionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetVersionResponse":
        return await self._unary_unary(
            "/massa.api.v1.MassaService/GetVersion",
            get_version_request,
            GetVersionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def new_blocks(
        self,
        new_blocks_request_iterator: Union[
            AsyncIterable["NewBlocksRequest"], Iterable["NewBlocksRequest"]
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["NewBlocksResponse"]:
        async for response in self._stream_stream(
            "/massa.api.v1.MassaService/NewBlocks",
            new_blocks_request_iterator,
            NewBlocksRequest,
            NewBlocksResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def new_blocks_headers(
        self,
        new_blocks_headers_request_iterator: Union[
            AsyncIterable["NewBlocksHeadersRequest"],
            Iterable["NewBlocksHeadersRequest"],
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["NewBlocksHeadersResponse"]:
        async for response in self._stream_stream(
            "/massa.api.v1.MassaService/NewBlocksHeaders",
            new_blocks_headers_request_iterator,
            NewBlocksHeadersRequest,
            NewBlocksHeadersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def new_endorsements(
        self,
        new_endorsements_request_iterator: Union[
            AsyncIterable["NewEndorsementsRequest"], Iterable["NewEndorsementsRequest"]
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["NewEndorsementsResponse"]:
        async for response in self._stream_stream(
            "/massa.api.v1.MassaService/NewEndorsements",
            new_endorsements_request_iterator,
            NewEndorsementsRequest,
            NewEndorsementsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def new_filled_blocks(
        self,
        new_filled_blocks_request_iterator: Union[
            AsyncIterable["NewFilledBlocksRequest"], Iterable["NewFilledBlocksRequest"]
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["NewFilledBlocksResponse"]:
        async for response in self._stream_stream(
            "/massa.api.v1.MassaService/NewFilledBlocks",
            new_filled_blocks_request_iterator,
            NewFilledBlocksRequest,
            NewFilledBlocksResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def new_operations(
        self,
        new_operations_request_iterator: Union[
            AsyncIterable["NewOperationsRequest"], Iterable["NewOperationsRequest"]
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["NewOperationsResponse"]:
        async for response in self._stream_stream(
            "/massa.api.v1.MassaService/NewOperations",
            new_operations_request_iterator,
            NewOperationsRequest,
            NewOperationsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def new_slot_execution_outputs(
        self,
        new_slot_execution_outputs_request_iterator: Union[
            AsyncIterable["NewSlotExecutionOutputsRequest"],
            Iterable["NewSlotExecutionOutputsRequest"],
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["NewSlotExecutionOutputsResponse"]:
        async for response in self._stream_stream(
            "/massa.api.v1.MassaService/NewSlotExecutionOutputs",
            new_slot_execution_outputs_request_iterator,
            NewSlotExecutionOutputsRequest,
            NewSlotExecutionOutputsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def send_blocks(
        self,
        send_blocks_request_iterator: Union[
            AsyncIterable["SendBlocksRequest"], Iterable["SendBlocksRequest"]
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["SendBlocksResponse"]:
        async for response in self._stream_stream(
            "/massa.api.v1.MassaService/SendBlocks",
            send_blocks_request_iterator,
            SendBlocksRequest,
            SendBlocksResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def send_endorsements(
        self,
        send_endorsements_request_iterator: Union[
            AsyncIterable["SendEndorsementsRequest"],
            Iterable["SendEndorsementsRequest"],
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["SendEndorsementsResponse"]:
        async for response in self._stream_stream(
            "/massa.api.v1.MassaService/SendEndorsements",
            send_endorsements_request_iterator,
            SendEndorsementsRequest,
            SendEndorsementsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def send_operations(
        self,
        send_operations_request_iterator: Union[
            AsyncIterable["SendOperationsRequest"], Iterable["SendOperationsRequest"]
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["SendOperationsResponse"]:
        async for response in self._stream_stream(
            "/massa.api.v1.MassaService/SendOperations",
            send_operations_request_iterator,
            SendOperationsRequest,
            SendOperationsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def transactions_throughput(
        self,
        transactions_throughput_request_iterator: Union[
            AsyncIterable["TransactionsThroughputRequest"],
            Iterable["TransactionsThroughputRequest"],
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["TransactionsThroughputResponse"]:
        async for response in self._stream_stream(
            "/massa.api.v1.MassaService/TransactionsThroughput",
            transactions_throughput_request_iterator,
            TransactionsThroughputRequest,
            TransactionsThroughputResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class MassaServiceBase(ServiceBase):
    async def get_blocks(
        self, get_blocks_request: "GetBlocksRequest"
    ) -> "GetBlocksResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_blocks_by_slots(
        self, get_blocks_by_slots_request: "GetBlocksBySlotsRequest"
    ) -> "GetBlocksBySlotsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_datastore_entries(
        self, get_datastore_entries_request: "GetDatastoreEntriesRequest"
    ) -> "GetDatastoreEntriesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_largest_stakers(
        self, get_largest_stakers_request: "GetLargestStakersRequest"
    ) -> "GetLargestStakersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_mip_status(
        self, get_mip_status_request: "GetMipStatusRequest"
    ) -> "GetMipStatusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_next_block_best_parents(
        self, get_next_block_best_parents_request: "GetNextBlockBestParentsRequest"
    ) -> "GetNextBlockBestParentsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_operations(
        self, get_operations_request: "GetOperationsRequest"
    ) -> "GetOperationsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_sc_execution_events(
        self, get_sc_execution_events_request: "GetScExecutionEventsRequest"
    ) -> "GetScExecutionEventsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_selector_draws(
        self, get_selector_draws_request: "GetSelectorDrawsRequest"
    ) -> "GetSelectorDrawsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_transactions_throughput(
        self, get_transactions_throughput_request: "GetTransactionsThroughputRequest"
    ) -> "GetTransactionsThroughputResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_version(
        self, get_version_request: "GetVersionRequest"
    ) -> "GetVersionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def new_blocks(
        self, new_blocks_request_iterator: AsyncIterator["NewBlocksRequest"]
    ) -> AsyncIterator["NewBlocksResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def new_blocks_headers(
        self,
        new_blocks_headers_request_iterator: AsyncIterator["NewBlocksHeadersRequest"],
    ) -> AsyncIterator["NewBlocksHeadersResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def new_endorsements(
        self, new_endorsements_request_iterator: AsyncIterator["NewEndorsementsRequest"]
    ) -> AsyncIterator["NewEndorsementsResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def new_filled_blocks(
        self,
        new_filled_blocks_request_iterator: AsyncIterator["NewFilledBlocksRequest"],
    ) -> AsyncIterator["NewFilledBlocksResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def new_operations(
        self, new_operations_request_iterator: AsyncIterator["NewOperationsRequest"]
    ) -> AsyncIterator["NewOperationsResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def new_slot_execution_outputs(
        self,
        new_slot_execution_outputs_request_iterator: AsyncIterator[
            "NewSlotExecutionOutputsRequest"
        ],
    ) -> AsyncIterator["NewSlotExecutionOutputsResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def send_blocks(
        self, send_blocks_request_iterator: AsyncIterator["SendBlocksRequest"]
    ) -> AsyncIterator["SendBlocksResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def send_endorsements(
        self,
        send_endorsements_request_iterator: AsyncIterator["SendEndorsementsRequest"],
    ) -> AsyncIterator["SendEndorsementsResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def send_operations(
        self, send_operations_request_iterator: AsyncIterator["SendOperationsRequest"]
    ) -> AsyncIterator["SendOperationsResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def transactions_throughput(
        self,
        transactions_throughput_request_iterator: AsyncIterator[
            "TransactionsThroughputRequest"
        ],
    ) -> AsyncIterator["TransactionsThroughputResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_blocks(
        self, stream: "grpclib.server.Stream[GetBlocksRequest, GetBlocksResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_blocks(request)
        await stream.send_message(response)

    async def __rpc_get_blocks_by_slots(
        self,
        stream: "grpclib.server.Stream[GetBlocksBySlotsRequest, GetBlocksBySlotsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_blocks_by_slots(request)
        await stream.send_message(response)

    async def __rpc_get_datastore_entries(
        self,
        stream: "grpclib.server.Stream[GetDatastoreEntriesRequest, GetDatastoreEntriesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_datastore_entries(request)
        await stream.send_message(response)

    async def __rpc_get_largest_stakers(
        self,
        stream: "grpclib.server.Stream[GetLargestStakersRequest, GetLargestStakersResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_largest_stakers(request)
        await stream.send_message(response)

    async def __rpc_get_mip_status(
        self, stream: "grpclib.server.Stream[GetMipStatusRequest, GetMipStatusResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_mip_status(request)
        await stream.send_message(response)

    async def __rpc_get_next_block_best_parents(
        self,
        stream: "grpclib.server.Stream[GetNextBlockBestParentsRequest, GetNextBlockBestParentsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_next_block_best_parents(request)
        await stream.send_message(response)

    async def __rpc_get_operations(
        self,
        stream: "grpclib.server.Stream[GetOperationsRequest, GetOperationsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_operations(request)
        await stream.send_message(response)

    async def __rpc_get_sc_execution_events(
        self,
        stream: "grpclib.server.Stream[GetScExecutionEventsRequest, GetScExecutionEventsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_sc_execution_events(request)
        await stream.send_message(response)

    async def __rpc_get_selector_draws(
        self,
        stream: "grpclib.server.Stream[GetSelectorDrawsRequest, GetSelectorDrawsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_selector_draws(request)
        await stream.send_message(response)

    async def __rpc_get_transactions_throughput(
        self,
        stream: "grpclib.server.Stream[GetTransactionsThroughputRequest, GetTransactionsThroughputResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_transactions_throughput(request)
        await stream.send_message(response)

    async def __rpc_get_version(
        self, stream: "grpclib.server.Stream[GetVersionRequest, GetVersionResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_version(request)
        await stream.send_message(response)

    async def __rpc_new_blocks(
        self, stream: "grpclib.server.Stream[NewBlocksRequest, NewBlocksResponse]"
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.new_blocks,
            stream,
            request,
        )

    async def __rpc_new_blocks_headers(
        self,
        stream: "grpclib.server.Stream[NewBlocksHeadersRequest, NewBlocksHeadersResponse]",
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.new_blocks_headers,
            stream,
            request,
        )

    async def __rpc_new_endorsements(
        self,
        stream: "grpclib.server.Stream[NewEndorsementsRequest, NewEndorsementsResponse]",
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.new_endorsements,
            stream,
            request,
        )

    async def __rpc_new_filled_blocks(
        self,
        stream: "grpclib.server.Stream[NewFilledBlocksRequest, NewFilledBlocksResponse]",
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.new_filled_blocks,
            stream,
            request,
        )

    async def __rpc_new_operations(
        self,
        stream: "grpclib.server.Stream[NewOperationsRequest, NewOperationsResponse]",
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.new_operations,
            stream,
            request,
        )

    async def __rpc_new_slot_execution_outputs(
        self,
        stream: "grpclib.server.Stream[NewSlotExecutionOutputsRequest, NewSlotExecutionOutputsResponse]",
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.new_slot_execution_outputs,
            stream,
            request,
        )

    async def __rpc_send_blocks(
        self, stream: "grpclib.server.Stream[SendBlocksRequest, SendBlocksResponse]"
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.send_blocks,
            stream,
            request,
        )

    async def __rpc_send_endorsements(
        self,
        stream: "grpclib.server.Stream[SendEndorsementsRequest, SendEndorsementsResponse]",
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.send_endorsements,
            stream,
            request,
        )

    async def __rpc_send_operations(
        self,
        stream: "grpclib.server.Stream[SendOperationsRequest, SendOperationsResponse]",
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.send_operations,
            stream,
            request,
        )

    async def __rpc_transactions_throughput(
        self,
        stream: "grpclib.server.Stream[TransactionsThroughputRequest, TransactionsThroughputResponse]",
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.transactions_throughput,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/massa.api.v1.MassaService/GetBlocks": grpclib.const.Handler(
                self.__rpc_get_blocks,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetBlocksRequest,
                GetBlocksResponse,
            ),
            "/massa.api.v1.MassaService/GetBlocksBySlots": grpclib.const.Handler(
                self.__rpc_get_blocks_by_slots,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetBlocksBySlotsRequest,
                GetBlocksBySlotsResponse,
            ),
            "/massa.api.v1.MassaService/GetDatastoreEntries": grpclib.const.Handler(
                self.__rpc_get_datastore_entries,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDatastoreEntriesRequest,
                GetDatastoreEntriesResponse,
            ),
            "/massa.api.v1.MassaService/GetLargestStakers": grpclib.const.Handler(
                self.__rpc_get_largest_stakers,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetLargestStakersRequest,
                GetLargestStakersResponse,
            ),
            "/massa.api.v1.MassaService/GetMipStatus": grpclib.const.Handler(
                self.__rpc_get_mip_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetMipStatusRequest,
                GetMipStatusResponse,
            ),
            "/massa.api.v1.MassaService/GetNextBlockBestParents": grpclib.const.Handler(
                self.__rpc_get_next_block_best_parents,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetNextBlockBestParentsRequest,
                GetNextBlockBestParentsResponse,
            ),
            "/massa.api.v1.MassaService/GetOperations": grpclib.const.Handler(
                self.__rpc_get_operations,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetOperationsRequest,
                GetOperationsResponse,
            ),
            "/massa.api.v1.MassaService/GetScExecutionEvents": grpclib.const.Handler(
                self.__rpc_get_sc_execution_events,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetScExecutionEventsRequest,
                GetScExecutionEventsResponse,
            ),
            "/massa.api.v1.MassaService/GetSelectorDraws": grpclib.const.Handler(
                self.__rpc_get_selector_draws,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetSelectorDrawsRequest,
                GetSelectorDrawsResponse,
            ),
            "/massa.api.v1.MassaService/GetTransactionsThroughput": grpclib.const.Handler(
                self.__rpc_get_transactions_throughput,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetTransactionsThroughputRequest,
                GetTransactionsThroughputResponse,
            ),
            "/massa.api.v1.MassaService/GetVersion": grpclib.const.Handler(
                self.__rpc_get_version,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetVersionRequest,
                GetVersionResponse,
            ),
            "/massa.api.v1.MassaService/NewBlocks": grpclib.const.Handler(
                self.__rpc_new_blocks,
                grpclib.const.Cardinality.STREAM_STREAM,
                NewBlocksRequest,
                NewBlocksResponse,
            ),
            "/massa.api.v1.MassaService/NewBlocksHeaders": grpclib.const.Handler(
                self.__rpc_new_blocks_headers,
                grpclib.const.Cardinality.STREAM_STREAM,
                NewBlocksHeadersRequest,
                NewBlocksHeadersResponse,
            ),
            "/massa.api.v1.MassaService/NewEndorsements": grpclib.const.Handler(
                self.__rpc_new_endorsements,
                grpclib.const.Cardinality.STREAM_STREAM,
                NewEndorsementsRequest,
                NewEndorsementsResponse,
            ),
            "/massa.api.v1.MassaService/NewFilledBlocks": grpclib.const.Handler(
                self.__rpc_new_filled_blocks,
                grpclib.const.Cardinality.STREAM_STREAM,
                NewFilledBlocksRequest,
                NewFilledBlocksResponse,
            ),
            "/massa.api.v1.MassaService/NewOperations": grpclib.const.Handler(
                self.__rpc_new_operations,
                grpclib.const.Cardinality.STREAM_STREAM,
                NewOperationsRequest,
                NewOperationsResponse,
            ),
            "/massa.api.v1.MassaService/NewSlotExecutionOutputs": grpclib.const.Handler(
                self.__rpc_new_slot_execution_outputs,
                grpclib.const.Cardinality.STREAM_STREAM,
                NewSlotExecutionOutputsRequest,
                NewSlotExecutionOutputsResponse,
            ),
            "/massa.api.v1.MassaService/SendBlocks": grpclib.const.Handler(
                self.__rpc_send_blocks,
                grpclib.const.Cardinality.STREAM_STREAM,
                SendBlocksRequest,
                SendBlocksResponse,
            ),
            "/massa.api.v1.MassaService/SendEndorsements": grpclib.const.Handler(
                self.__rpc_send_endorsements,
                grpclib.const.Cardinality.STREAM_STREAM,
                SendEndorsementsRequest,
                SendEndorsementsResponse,
            ),
            "/massa.api.v1.MassaService/SendOperations": grpclib.const.Handler(
                self.__rpc_send_operations,
                grpclib.const.Cardinality.STREAM_STREAM,
                SendOperationsRequest,
                SendOperationsResponse,
            ),
            "/massa.api.v1.MassaService/TransactionsThroughput": grpclib.const.Handler(
                self.__rpc_transactions_throughput,
                grpclib.const.Cardinality.STREAM_STREAM,
                TransactionsThroughputRequest,
                TransactionsThroughputResponse,
            ),
        }
